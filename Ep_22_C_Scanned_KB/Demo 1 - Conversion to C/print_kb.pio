/*
 This is the PIO program for scanning and outputting a 4 x 6 keyboard.   
 
*/
// ****************************C PIO program follows***************
   
.program pio_kb_scan
.wrap_target
begin_again:
    pull noblock             ; 0b1000,1000,0100,0100,0010,0010,0001,0001
    mov x, osr               ; preserves the value of the last pull. Pull(noblock) = mov(osr,x) if transmit FIFO is empty   
// At this point, the OSR holds the values for the row selection doubled up in sequence (special sequencing word)
// (1000,1000,0100,0100,0010,0010,0001,0001 binary) The osr gets pulled twice for each row, once for row selection
// and once for row memorialization
// The 4 lsb's correspond to the GPIO for the rows  
// In this section, turn on all the rows and look for a button push     
start_scan:
    set pins, 15   [31]      ; turn on all rows in button matrix
    in pins, 6     [31]      ; move the column status into the ISR (GPIO 6, 7, 8, 9, 10, 11)
    mov y, isr     [31]      ; shift irs into y register for zero sampling
    jmp !y, start_scan [31]  ; branch if y scratch register is zero, meaning no button is pushed

// button pushed, find out which one
// This section turns on each row, one at a time    
output_osr:
    jmp !osre, check_row     ; Check row if OSR still has data, otherwise pull in the sequencing word again
.wrap                        ; osr is empty so start it again
check_row:
    in null, 32    [31]      ; clear the isr
    out pins, 4    [31]      ; This outputs the 4 lsb's of the OSR to the GPIO, selecting the row
    in pins, 6     [31]      ; input the status of the buttons (columns)
    mov y, isr     [31]      ; load the y register for zero test
    in osr, 4      [31]      ; loads the isr with the row (0000,0000,0000,0000,0000,00CC,CCCC,RRRR) C=column, R=row
    out pins, 4              ; this simply drains off the extra 4 lsb's
    jmp !y, output_osr [31]  ; branch if y scratch register is zero, meaning no button is pushed
// button was pushed, now process
    push                     ; output the ISR to the main program 
	
check_button_off:
    set pins, 15   [31]      ; turn on all rows in button matrix
    in pins, 6     [31]      ; move the column status into the ISR (GPIO 6, 7, 8, 9, 10, 11)
    mov y, isr     [31]      ; shift irs into y register for zero sampling
    jmp !y, begin_again [31] ; branch if y scratch register is zero, meaning no button is pushed so go to top
    jmp check_button_off     ; button still pressed, so check again
    
% c-sdk {
#include "hardware/clocks.h"
static inline void pio_kb_scan_program_init(PIO pio, uint sm, uint offset, uint outPin, uint inPin, float freq) {
    pio_sm_config c = pio_kb_scan_program_get_default_config(offset);
	// Set the pin group GPIO function (connect PIO to the pad)
	// "outPin" is start of output pin group, "4" is the number of pins in the output pin group
    for(uint j=outPin; j<(outPin+4); j++) {
		pio_gpio_init(pio, j);
	}
	// Set the OUT and SET (rows) pin groups' direction to output for 4 pins 
    pio_sm_set_consecutive_pindirs(pio, sm, outPin, 4, true);   
    // Map the 4 OUT (rows) outputs starting at 'outPin'
	sm_config_set_out_pins(&c, outPin,4);
	// Map the state machine's SET (the same as OUT) pin group to 4 pins, also starting at 'outPin'
    sm_config_set_set_pins(&c, outPin, 4);	
	// Set the IN (columns) pin group's direction to input for 6 pins 
    pio_sm_set_consecutive_pindirs(pio, sm, inPin, 6, false);
	//set up to shift OSR right with no autopull (LSB out first)
	sm_config_set_out_shift(&c, true, false, 32);
	//set up to shift ISR left with no autopush (MSB out first)
	sm_config_set_in_shift(&c, false, false, 32);
    // Map the 6 IN (columns) inputs starting at 'inPin'
	sm_config_set_in_pins(&c, inPin);
	sm_config_set_in_pin_count(&c, 6);
	// set the state machine clock rate
	float div = clock_get_hz(clk_sys) / freq ;  // calculates the clock divider
	sm_config_set_clkdiv(&c, div);
    // Load our configuration, and jump to the start of the program
    pio_sm_init(pio, sm, offset, &c);
    // Set the state machine running
    pio_sm_set_enabled(pio, sm, true);
}
%}
