//*****************Demonstration Programs*****************************
//***************Demo 19A*********************************************
//******C main program************************************************
//C code
/* 
PIO Ep. 19 PIO IRQs
PIO Demo 19A - Demonstrating ID and clearing of IRQ 0 through 4 on one state machine
 */

#include <stdlib.h>
#include <stdio.h>
#include <string.h>

#include "hardware/irq.h"
#include "hardware/clocks.h"
#include "hardware/pio.h"
#include "pioInterrupt.pio.h"

static PIO PIO_O;       // pio object
static uint SM;         // pio state machine index
static uint PIO_IRQ;    // NVIC ARM CPU interrupt number 
//int x;
//char* pointer = (char*)0x50200128; //pointer for PIO0 INTR register
//char* pointerNVIC = (char*)(PPB_BASE + M0PLUS_NVIC_ICPR_OFFSET); //pointer for NVIC ICPR register


void pioIRQ(){          //This is our callback function

	printf("[IRQ] %d - ", PIO_O->irq & 0b1111 );
      
    if(pio_interrupt_get(PIO_O,0)) // returns TRUE if IRQ 0 is set
    {	
		printf("IRQ0 - Before clearing [INTR]: %x [IRQ]: %x; ", PIO_O->intr, PIO_O->irq );
        pio_interrupt_clear(PIO_O, 0);
		printf("After clearing [INTR]: %x [IRQ]: %x \n", PIO_O->intr, PIO_O->irq );
    }
    else if(pio_interrupt_get(PIO_O,1)) // returns TRUE if IRQ 1 is set
    {
		printf("IRQ1 - Before clearing [INTR]: %x [IRQ]: %x; ", PIO_O->intr, PIO_O->irq );
        pio_interrupt_clear(PIO_O, 1);
		printf("After clearing [INTR]: %x [IRQ]: %x \n", PIO_O->intr, PIO_O->irq );
    }
    else if(pio_interrupt_get(PIO_O,2)) // returns TRUE if IRQ 2 is set
    {
		printf("IRQ2 - Before clearing [INTR]: %x [IRQ]: %x; ", PIO_O->intr, PIO_O->irq );
        pio_interrupt_clear(PIO_O, 2);
		printf("After clearing [INTR]: %x [IRQ]: %x \n", PIO_O->intr, PIO_O->irq );
    }    
    else if(pio_interrupt_get(PIO_O,3)) // returns TRUE if IRQ 3 is set
    {
		printf("IRQ3 - Before clearing [INTR]: %x [IRQ]: %x; ", PIO_O->intr, PIO_O->irq );
        pio_interrupt_clear(PIO_O, 3);
		printf("After clearing [INTR]: %x [IRQ]: %x \n", PIO_O->intr, PIO_O->irq );
    }

}

void testIRQPIO(uint pioNum) {
    PIO_O = pioNum ? pio1 : pio0; //Selects the pio instance (0 or 1 for pioNUM)
    PIO_IRQ = pioNum ? PIO1_IRQ_0 : PIO0_IRQ_0;  // Selects the NVIC PIO_IRQ to use
		
    // Our assembled program needs to be loaded into this PIO's instruction
    // memory. This SDK function will find a location (offset) in the
    // instruction memory where there is enough space for our program. We need
    // to remember this location!
    uint offset = pio_add_program(PIO_O, &pioIRQ_program); 
	
	// Assign GPIO0 as the blinking LED
	uint BLINK_LED_PIN = 0;
	
	// select the desired state machine clock frequency (2000 is about the lower limit)
	float SM_CLK_FREQ = 2000;

    // Find a free state machine on our chosen PIO (erroring if there are
    // none). Configure it to run our program, and start it, using the
    // helper function we included in our .pio file.
    SM = pio_claim_unused_sm(PIO_O, true);
    pioIRQ_program_init(PIO_O, SM, offset, BLINK_LED_PIN, SM_CLK_FREQ);	
	

//enables IRQ for the statemachine - setting IRQ0_INTE - interrupt enable register
    //pio_set_irq0_source_enabled(PIO_O, pis_interrupt0, true); // sets IRQ0
    //pio_set_irq0_source_enabled(PIO_O, pis_interrupt1, true); // sets IRQ1
	//pio_set_irq0_source_enabled(PIO_O, pis_interrupt2, true); // sets IRQ2
	//pio_set_irq0_source_enabled(PIO_O, pis_interrupt3, true); // sets IRQ3
  //*********or************	
	pio_set_irq0_source_mask_enabled(PIO_O, 3840, true); //setting all 4 at once
	
    irq_set_exclusive_handler(PIO_IRQ, pioIRQ);  //Set the handler in the NVIC
    irq_set_enabled(PIO_IRQ, true);                    //enabling the PIO1_IRQ_0

}


int main(void)
{
  stdio_init_all();
  sleep_ms(20000);  //gives me time to start PuTTY
  printf("start program\n");
  testIRQPIO(0);
  printf("PIO: %d, SM: %d, PIO_IRQ_num: %d \n", pio_get_index(PIO_O), SM, PIO_IRQ);

  while (1)
  {
   sleep_ms(200);  
   printf("."); //watchdog printout
  }

  return 0;
}
//***********Demo 19A PIO program************************************************
/*
 This is IRQ_demo_19A.  This will blink the LED on and off once and then 
 for interrupt 0 to be cleared by a handler; Life With David Ep 19 Demo A
*/
.program pioIRQ


// turn on the LED and delay, taking 1000 cycles
start:
    set pins, 1
	set x,   31     [6]
delay_high:
	nop				[29]
	jmp x-- delay_high
// turn off the LED and delay, taking 1000 cycles
    set pins, 0
	set x,   31     [6]
delay_low:	
	nop				[29]
	jmp x-- delay_low	
//  jmp start
//set interrupt and stall
irq_stall:
	nop              [29]
	irq wait 3
//	push block
    jmp start



% c-sdk {
#include "hardware/clocks.h"
static inline void pioIRQ_program_init(PIO pio, uint sm, uint offset, uint pin, float freq) {
    pio_sm_config c = pioIRQ_program_get_default_config(offset);

    // Map the state machine's SET pin group to one pin, namely the `pin`
    // parameter to this function.
    sm_config_set_set_pins(&c, pin, 1);
	
    // Set this pin's GPIO function (connect PIO to the pad)
    pio_gpio_init(pio, pin);
	
    // Set the pin direction to output at the PIO
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, true);
	
	// set the state machine clock rate
	float div = clock_get_hz(clk_sys) / freq ;  // calculates the clock divider
	sm_config_set_clkdiv(&c, div);
	
    // Load our configuration, and jump to the start of the program
    pio_sm_init(pio, sm, offset, &c);
	
    // Set the state machine running
    pio_sm_set_enabled(pio, sm, true);
}
%}


//**********************Demo 19B************************************************
//*************C Main Program*******************************************
//C code
/* 
PIO Ep. 19 PIO IRQs
PIO Demo 19B - Demonstrate ID and clearing of IRQ 4 through 7 on one state machine
 */

#include <stdlib.h>
#include <stdio.h>
#include <string.h>

#include "hardware/irq.h"
#include "hardware/clocks.h"
#include "hardware/pio.h"
#include "pioInterrupt.pio.h"

static PIO PIO_O;       // pio object
static uint SM;         // pio state machine index
static uint PIO_IRQ;    // NVIC ARM CPU interrupt number 


void pioIRQ(){          //This is our polling function

	//printf("[IRQ] %d - ", PIO_O->irq & 0b1111111 ); // This can be used to set up a case
      
    if(pio_interrupt_get(PIO_O,4)) // returns TRUE if IRQ 4 is set
    {	
		printf("IRQ4 - Before clearing [INTR]: %x [IRQ]: %x; ", PIO_O->intr, PIO_O->irq );
        pio_interrupt_clear(PIO_O, 4);
		printf("After clearing [INTR]: %x [IRQ]: %x \n", PIO_O->intr, PIO_O->irq );
    }
    else if(pio_interrupt_get(PIO_O,5)) // returns TRUE if IRQ 5 is set
    {
		printf("IRQ5 - Before clearing [INTR]: %x [IRQ]: %x; ", PIO_O->intr, PIO_O->irq );
        pio_interrupt_clear(PIO_O, 5);
		printf("After clearing [INTR]: %x [IRQ]: %x \n", PIO_O->intr, PIO_O->irq );
    }
    else if(pio_interrupt_get(PIO_O,6)) // returns TRUE if IRQ 6 is set
    {
		printf("IRQ6 - Before clearing [INTR]: %x [IRQ]: %x; ", PIO_O->intr, PIO_O->irq );
        pio_interrupt_clear(PIO_O, 6);
		printf("After clearing [INTR]: %x [IRQ]: %x \n", PIO_O->intr, PIO_O->irq );
    }    
    else if(pio_interrupt_get(PIO_O,7)) // returns TRUE if IRQ 7 is set
    {
		printf("IRQ7 - Before clearing [INTR]: %x [IRQ]: %x; ", PIO_O->intr, PIO_O->irq );
        pio_interrupt_clear(PIO_O, 7);
		printf("After clearing [INTR]: %x [IRQ]: %x \n", PIO_O->intr, PIO_O->irq );
    }

}

void testIRQPIO(uint pioNum) {
    PIO_O = pioNum ? pio1 : pio0; //Selects the pio instance (0 or 1 for pioNUM)
    PIO_IRQ = pioNum ? PIO1_IRQ_0 : PIO0_IRQ_0;  // Selects the NVIC PIO_IRQ to use
		
    // Our assembled program needs to be loaded into this PIO's instruction
    // memory. This SDK function will find a location (offset) in the
    // instruction memory where there is enough space for our program. We need
    // to remember this location!
    uint offset = pio_add_program(PIO_O, &pioIRQ_program); 
	
	// Assign GPIO0 as the blinking LED
	uint BLINK_LED_PIN = 0;
	
	// select the desired state machine clock frequency (2500 is about the lower limit)
	float SM_CLK_FREQ = 2000;

    // Find a free state machine on our chosen PIO (erroring if there are
    // none). Configure it to run our program, and start it, using the
    // helper function we included in our .pio file.
    SM = pio_claim_unused_sm(PIO_O, true);
    pioIRQ_program_init(PIO_O, SM, offset, BLINK_LED_PIN, SM_CLK_FREQ);	
	
}

int main(void)
{
  stdio_init_all();
  sleep_ms(20000);  //gives me time to start PUTTY
  printf("start program\n");
  testIRQPIO(0);
  printf("PIO: %d, SM: %d, PIO_IRQ_num: %d \n", pio_get_index(PIO_O), SM, PIO_IRQ);

  while (1)
  {
   sleep_ms(200);  
   printf("."); //watchdog printout
   pioIRQ();
  }

  return 0;
}

//*****************Demo 19B PIO Program************************************************

/*
 This is IRQ_demo_19B.  This will blink the LED on and off once and then 
 for interrupt 4-7  to be cleared by a polling routine; Life With David Ep 19 Demo B
*/
.program pioIRQ


// turn on the LED and delay, taking 1000 cycles
start:
    set pins, 1
	set x,   31     [6]
delay_high:
	nop				[29]
	jmp x-- delay_high
// turn off the LED and delay, taking 1000 cycles
    set pins, 0
	set x,   31     [6]
delay_low:	
	nop				[29]
	jmp x-- delay_low	
//  jmp start
//set interrupt and stall
irq_stall:
	nop              [29]
	irq wait 7
//	push block
    jmp start



% c-sdk {
#include "hardware/clocks.h"
static inline void pioIRQ_program_init(PIO pio, uint sm, uint offset, uint pin, float freq) {
    pio_sm_config c = pioIRQ_program_get_default_config(offset);

    // Map the state machine's SET pin group to one pin, namely the `pin`
    // parameter to this function.
    sm_config_set_set_pins(&c, pin, 1);
	
    // Set this pin's GPIO function (connect PIO to the pad)
    pio_gpio_init(pio, pin);
	
    // Set the pin direction to output at the PIO
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, true);
	
	// set the state machine clock rate
	float div = clock_get_hz(clk_sys) / freq ;  // calculates the clock divider
	sm_config_set_clkdiv(&c, div);
	
    // Load our configuration, and jump to the start of the program
    pio_sm_init(pio, sm, offset, &c);
	
    // Set the state machine running
    pio_sm_set_enabled(pio, sm, true);
}
%}

//*********************Demo 19C**************************************
//**************C Main Program************************************
//C code
/* 
PIO Ep. 19 PIO IRQs
PIO Demo 19C - Demonstrating ID and clearing of 4 state machines using IRQ0
 */

#include <stdlib.h>
#include <stdio.h>
#include <string.h>

#include "hardware/irq.h"
#include "hardware/clocks.h"
#include "hardware/pio.h"
#include "pioInterrupt.pio.h"

static PIO PIO_O;       // pio object
static uint SM_0;         // pio state machine index
static uint SM_1;         // pio state machine index
static uint SM_2;         // pio state machine index
static uint SM_3;         // pio state machine index
static uint PIO_IRQ;    // NVIC ARM CPU interrupt number 
//int x;
//char* pointer = (char*)0x50200128; //pointer for PIO0 INTR register
//char* pointerNVIC = (char*)(PPB_BASE + M0PLUS_NVIC_ICPR_OFFSET); //pointer for NVIC ICPR register


void pioIRQ(){          //This is our handler function
	irq_set_enabled	(PIO_IRQ, false);
	//printf("[IRQ] %d - ", PIO_O->irq & 0b1111111 ); 
      
    if(pio_interrupt_get(PIO_O,0)) // returns TRUE if IRQ 0 is set
    {	
		printf("IRQ0 - Before clearing [INTR]: %x [IRQ]: %x; ", PIO_O->intr, PIO_O->irq );
        pio_interrupt_clear(PIO_O, 0);
		printf("After clearing [INTR]: %x [IRQ]: %x \n", PIO_O->intr, PIO_O->irq );
    }
    else if(pio_interrupt_get(PIO_O,1)) // returns TRUE if IRQ 1 is set
    {
		printf("IRQ1 - Before clearing [INTR]: %x [IRQ]: %x; ", PIO_O->intr, PIO_O->irq );
        pio_interrupt_clear(PIO_O, 1);
		printf("After clearing [INTR]: %x [IRQ]: %x \n", PIO_O->intr, PIO_O->irq );
    }
    else if(pio_interrupt_get(PIO_O,2)) // returns TRUE if IRQ 1 is set
    {
		printf("IRQ2 - Before clearing [INTR]: %x [IRQ]: %x; ", PIO_O->intr, PIO_O->irq );
        pio_interrupt_clear(PIO_O, 2);
		printf("After clearing [INTR]: %x [IRQ]: %x \n", PIO_O->intr, PIO_O->irq );
    }    
    else if(pio_interrupt_get(PIO_O,3)) // returns TRUE if IRQ 1 is set
    {
		printf("IRQ3 - Before clearing [INTR]: %x [IRQ]: %x; ", PIO_O->intr, PIO_O->irq );
        pio_interrupt_clear(PIO_O, 3);
		printf("After clearing [INTR]: %x [IRQ]: %x \n", PIO_O->intr, PIO_O->irq );
    }
	irq_set_enabled	(PIO_IRQ, true);
}

void testIRQPIO(uint pioNum) {
    PIO_O = pioNum ? pio1 : pio0; //Selects the pio instance (0 or 1 for pioNUM)
    PIO_IRQ = pioNum ? PIO1_IRQ_0 : PIO0_IRQ_0;  // Selects the NVIC PIO_IRQ to use
		
    // Our assembled program needs to be loaded into this PIO's instruction
    // memory. This SDK function will find a location (offset) in the
    // instruction memory where there is enough space for our program. We need
    // to remember this location!
    uint offset = pio_add_program(PIO_O, &pioIRQ_program); 
	
	// Assign GPIO0 as the blinking LED
	uint BLINK_LED_PIN = 0;
	
	// select the desired state machine clock frequency (2500 is about the lower limit)
	float SM_CLK_FREQ = 2000;

    // Manually assign all four State Machines on our chosen PIO . Configure them to run 
	//our program, and start them, using the
    // helper function we included in our .pio file.
    pio_sm_claim(PIO_O, 0);
	pio_sm_claim(PIO_O, 1);
	pio_sm_claim(PIO_O, 2);
	pio_sm_claim(PIO_O, 3);
	
    pioIRQ_program_init(PIO_O, 0, offset, BLINK_LED_PIN, SM_CLK_FREQ);
	sleep_ms(250);	
	pioIRQ_program_init(PIO_O, 1, offset, BLINK_LED_PIN + 1, SM_CLK_FREQ);
	sleep_ms(250);	
	pioIRQ_program_init(PIO_O, 2, offset, BLINK_LED_PIN + 2, SM_CLK_FREQ);
	sleep_ms(250);
	pioIRQ_program_init(PIO_O, 3, offset, BLINK_LED_PIN + 3, SM_CLK_FREQ);	
	

//enables IRQ for the statemachine - setting IRQ0_INTE - interrupt enable register
    //pio_set_irq0_source_enabled(PIO_O, pis_interrupt0, true); // sets 
    //pio_set_irq0_source_enabled(PIO_O, pis_interrupt1, true);
	//pio_set_irq0_source_enabled(PIO_O, pis_interrupt2, true);
	//pio_set_irq0_source_enabled(PIO_O, pis_interrupt3, true);
  //*********or************	
	pio_set_irq0_source_mask_enabled(PIO_O, 3840, true); //setting all 4 at once
	
    irq_set_exclusive_handler(PIO_IRQ, pioIRQ);  //Set the handler in the NVIC
    //irq_add_shared_handler
    irq_set_enabled(PIO_IRQ, true);                    //enabling the PIO1_IRQ_0

}


int main(void)
{
  stdio_init_all();
  sleep_ms(20000);  //gives me time to start PUTTY
  printf("start program\n");
  testIRQPIO(0);
  printf("PIO: %d, PIO_IRQ_num: %d \n", pio_get_index(PIO_O), PIO_IRQ);

  while (1)
  {
	sleep_ms(200);  
    printf("."); //watchdog printout
  }

  return 0;
}

//**************************Demo 19C PIO Program************************
/*
 This is IRQ_demo_19C.  This will blink the LED on and off once and then 
 for interrupt 0-3  to be cleared by a polling routine; Life With David Ep 19 Demo C
*/
.program pioIRQ


// turn on the LED and delay, taking 1000 cycles
start:
    set pins, 1
	set x,   31     [6]
delay_high:
	nop				[29]
//	nop				[29]
	jmp x-- delay_high
// turn off the LED and delay, taking 1000 cycles
    set pins, 0
	set x,   31     [6]
delay_low:	
	nop				[29]
//	nop				[29]
	jmp x-- delay_low	
//  jmp start
//set interrupt and stall
irq_stall:
	nop              [29]
	irq wait 0 rel
//	push block
    jmp start



% c-sdk {
#include "hardware/clocks.h"
static inline void pioIRQ_program_init(PIO pio, uint sm, uint offset, uint pin, float freq) {
    pio_sm_config c = pioIRQ_program_get_default_config(offset);

    // Map the state machine's SET pin group to one pin, namely the `pin`
    // parameter to this function.
    sm_config_set_set_pins(&c, pin, 1);
	
    // Set this pin's GPIO function (connect PIO to the pad)
    pio_gpio_init(pio, pin);
	
    // Set the pin direction to output at the PIO
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, true);
	
	// set the state machine clock rate
	float div = clock_get_hz(clk_sys) / freq ;  // calculates the clock divider
	sm_config_set_clkdiv(&c, div);
	
    // Load our configuration, and jump to the start of the program
    pio_sm_init(pio, sm, offset, &c);
	
    // Set the state machine running
    pio_sm_set_enabled(pio, sm, true);
}
%}

//***********************Demo 19D****************************************
//****************C Main Program************************************
//C code
/* 
PIO Ep. 19 PIO IRQs
PIO Demo 19D - Synchronizing 4 state machines using IRQ7
 */

#include <stdlib.h>
#include <stdio.h>
#include <string.h>

#include "hardware/irq.h"
#include "hardware/clocks.h"
#include "hardware/pio.h"
#include "pioInterrupt.pio.h"

static PIO PIO_O;       // pio object
static uint SM_0;         // pio state machine index
static uint SM_1;         // pio state machine index
static uint SM_2;         // pio state machine index
static uint SM_3;         // pio state machine index
static uint PIO_IRQ;    // NVIC ARM CPU interrupt number
static uint GPIO20 = 20; 



void testIRQPIO(uint pioNum) {
    PIO_O = pioNum ? pio1 : pio0; //Selects the pio instance (0 or 1 for pioNUM)
    PIO_IRQ = pioNum ? PIO1_IRQ_0 : PIO0_IRQ_0;  // Selects the NVIC PIO_IRQ to use
		
    // Our assembled program needs to be loaded into this PIO's instruction
    // memory. This SDK function will find a location (offset) in the
    // instruction memory where there is enough space for our program. We need
    // to remember this location!
    uint offset = pio_add_program(PIO_O, &pioIRQ_program); 
	
	// Assign GPIO0 as the blinking LED and jmp pin as GPIO16
	uint BLINK_LED_PIN = 0;
	uint JMP_PIN_BASE = 16;
	
	// select the desired state machine clock frequency (2500 is about the lower limit)
	float SM_CLK_FREQ = 2000;

    // Manually assign all four State Machines on our chosen PIO . Configure them to run 
	//our program, and start them, using the
    // helper function we included in our .pio file.
    pio_sm_claim(PIO_O, 0);
	pio_sm_claim(PIO_O, 1);
	pio_sm_claim(PIO_O, 2);
	pio_sm_claim(PIO_O, 3);
	
    pioIRQ_program_init(PIO_O, 0, offset, BLINK_LED_PIN, JMP_PIN_BASE, SM_CLK_FREQ);
	sleep_ms(250);	
	pioIRQ_program_init(PIO_O, 1, offset, BLINK_LED_PIN + 1, JMP_PIN_BASE+1, SM_CLK_FREQ);
	sleep_ms(250);	
	pioIRQ_program_init(PIO_O, 2, offset, BLINK_LED_PIN + 2, JMP_PIN_BASE+2, SM_CLK_FREQ);
	sleep_ms(250);
	pioIRQ_program_init(PIO_O, 3, offset, BLINK_LED_PIN + 3, JMP_PIN_BASE+3, SM_CLK_FREQ);	
	
}


int main(void)
{
  stdio_init_all();
  gpio_set_dir(GPIO20,false); // set gpio as input
  gpio_pull_down (GPIO20);
  sleep_ms(20000);  //gives me time to start PUTTY
  printf("start program\n");
  testIRQPIO(0);
  printf("PIO: %d, PIO_IRQ_num: %d \n", pio_get_index(PIO_O), PIO_IRQ);

  while (1)
  {
	sleep_ms(200); 
	if (gpio_get (GPIO20)==1)
	{
	sleep_ms(30);
	pio_interrupt_clear(PIO_O, 7);
	printf("IRQ7 cleared");
	}
    printf("."); //watchdog printout
  }

  return 0;
}
//**************************Demo 19D PIO Program************************************
/*
 This is IRQ_demo_19D.  This will blink the LED on and off and will jump to the stall
 routine when the jump button is pressed.  It will wait there until the interrupt is cleared .
 This is for synchronizing all state machines; Life With David Ep 19 Demo D
*/
.program pioIRQ


// turn on the LED and delay, taking 1000 cycles
start:
    set pins, 1
	set x,   31     [6]
delay_high:
	nop				[28]
	jmp pin	irq_stall			
	jmp x-- delay_high
// turn off the LED and delay, taking 1000 cycles
    set pins, 0
	set x,   31     [6]
delay_low:	
	nop				[28]
	jmp pin	irq_stall
	jmp x-- delay_low	
    jmp start
//set interrupt and stall
irq_stall:
	nop              [29]
	irq wait 7 
//	push block
    jmp start



% c-sdk {
#include "hardware/clocks.h"
static inline void pioIRQ_program_init(PIO pio, uint sm, uint offset, uint pin, uint jpin, float freq) {
    pio_sm_config c = pioIRQ_program_get_default_config(offset);

    // Map the state machine's SET pin group to one pin, namely the `pin`
    // parameter to this function.
    sm_config_set_set_pins(&c, pin, 1);
	
    // Set this pin's GPIO function (connect PIO to the pad)
    pio_gpio_init(pio, pin);
	
    // Set the pin direction to output at the PIO
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, true);
	
	// Set the jump pin for the state machine
	sm_config_set_jmp_pin (&c, jpin);
	
	// set the state machine clock rate
	float div = clock_get_hz(clk_sys) / freq ;  // calculates the clock divider
	sm_config_set_clkdiv(&c, div);
	
    // Load our configuration, and jump to the start of the program
    pio_sm_init(pio, sm, offset, &c);
	
    // Set the state machine running
    pio_sm_set_enabled(pio, sm, true);
}
%}

//******************************************************************************
//****************************CMakeLists.txt************************************
#CMakeLists.txt
cmake_minimum_required(VERSION 3.13)

include($ENV{PICO_SDK_PATH}/external/pico_sdk_import.cmake)
include($ENV{PICO_SDK_PATH}/tools/CMakeLists.txt)

project(IrqDemo C CXX ASM)

set(CMAKE_C_STANDARD 11)
set(CMAKE_CXX_STANDARD 17)

pico_sdk_init()

add_executable(${PROJECT_NAME})

# Example source
target_sources(${PROJECT_NAME} PUBLIC
        ${CMAKE_CURRENT_LIST_DIR}/main.c
        ${CMAKE_CURRENT_LIST_DIR}/pioInterrupt.pio
        )

pico_generate_pio_header(${PROJECT_NAME} ${CMAKE_CURRENT_LIST_DIR}/pioInterrupt.pio)
        
# Make sure TinyUSB can find tusb_config.h
target_include_directories(${PROJECT_NAME} PUBLIC
        ${CMAKE_CURRENT_LIST_DIR})

# In addition to pico_stdlib required for common PicoSDK functionality, add dependency on tinyusb_host
# for TinyUSB device support and tinyusb_board for the additional board support library used by the example
target_link_libraries(${PROJECT_NAME} PUBLIC pico_stdlib hardware_pio)

pico_add_extra_outputs(${PROJECT_NAME})

 
pico_enable_stdio_usb(${PROJECT_NAME} 1)
pico_enable_stdio_uart(${PROJECT_NAME} 0)