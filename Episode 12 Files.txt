Episode 12 files - Combined

**************************************
ep12_video_1E.PIO
**************************************



/* PIO Episode 12, Example 1E, written for C
 This PIO program demonstrates a simple VGA video interface


**************************
video_hsync
**************************
*/
.program	video_hsync

/*
The hsycn program needs the PIO clock to be set at 125MHz/(5*16) = 1.5625 MHz
 hsync timing:
    -pixel clock freq = 25 MHz = 125 MHz (pico clock) / 5
	-front porch width = 16 pixel clock cycles (divide pixel clock frequency
		by 16 to get 1 PIO clock cycle
    -sync width = 96 pixel clock cycles (divide pixel clock frequency
        by 16 to get 6 PIO clock cycles)
	-back porch width = 48 pixel clock cycles (divide pixel clock frequency
        by 16 to get 3 PIO clock cycles)
    -active pixel width = 640 pixel clock cycles (divide pixel clock freq
        by 16 to get 40 PIO clock cycles)

GPIO 16 is used for hsync
*/

//public hsync:
hsync_low:
	irq 5                   ; 01 cycles - set interupt 5 signaling start of front porch
	set pins, 0  		    ; 01 cycle  - Turns off GPIO 16, start of hsync pulse
	irq 4               [4] ; 05 cycles - set an interupt for the vsync counter
	set pins, 1   		[2] ; 03 cycles - Turns on GPIO 16, end of hsync pulse
	irq clear 5         [19]; 20 cycles - int 5 goes low signalling end of back porch
	jmp hsync_low		[19]; 20 cycles - back to trigger the hsync pulse again

// configure the hsync program
% c-sdk {
#include "hardware/clocks.h"

static inline void video_hsync_program_init(PIO pio, uint sm, uint offset, uint pin, float freq) {
    pio_sm_config c = video_hsync_program_get_default_config(offset);

    // Map the hsync set pin group to one pin, namely the `pin`
    // parameter to this function.
    sm_config_set_set_pins(&c, pin, 1);

    // Set this pin's GPIO function (connect PIO to the pad)
    pio_gpio_init(pio, pin);

    // Set the pin direction to output at the PIO
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, true);

	// set the state machine clock rate
	float div = clock_get_hz(clk_sys) / freq ;  // calculates the clock divider
	sm_config_set_clkdiv(&c, div);

    // Load our configuration, and jump to the start of the program
    pio_sm_init(pio, sm, offset, &c);

    // Set the state machine running
    pio_sm_set_enabled(pio, sm, true);
}
%}

/*
**************************
video_vsync
**************************
*/

.program    video_vsync

/*
The vsync program can have timing at full speed since the counting of the hsync
pulses is interupt driven.  Set the clock at the full pixel clock freq. of 25 MHz
or 125MHz/5.
  vsync timing:
      -total screen = 525 lines
	  -front porch (10 lines)
	  -vsync pulse width = 2 lines (2 hsync pulses)
      -back porch (33 lines) =
	  -active lines (480)

GPIO 17 is used for vsync
*/

//public vsync:

	set y , 9					;  set front porch delay
fp_delay:
	wait 1 irq 4				;  wait for each hsync pulse
	jmp Y-- fp_delay			;  front porch delay
	set pins, 0   		    	;  drive vsync low
	wait 1 irq 4				;  wait for the first of two hsync pulses
    wait 1 irq 4				;  wait for the second of two hsync pulses
	set pins, 1					;  turn off the vsync pulse (drive high)
	wait 1 irq 4				;  wait for first of 33 lines for back porch delay
	set y , 31					;  the rest of the 33 lines of back porch delay
bp_delay:
	wait 1 irq 4				;  wait for each hsync pulse in back porch
	jmp Y-- bp_delay			;  back porch delay
	irq clear 0 				;  Clear the blanking flag for end of vert. back porch
	mov y , x					;  Load the counter with active lines value forced into x register
visible_lines:
	wait 1 irq 4				;  wait for each hsync pulse
	jmp Y-- visible_lines		;  count the hsync pulses for visible scan lines
	irq 0						;  set IRQ 0 to flag start of vertical front porch




// configure the vsync program
% c-sdk {
#include "hardware/clocks.h"

static inline void video_vsync_program_init(PIO pio, uint sm, uint offset, uint pin, float freq) {

    pio_sm_config c = video_vsync_program_get_default_config(offset);

    // Map the vsync set pin group to one pin, namely the `pin`
    // parameter to this function.
    sm_config_set_set_pins(&c, pin, 1);

    // Set this pin's GPIO function (connect PIO to the pad)
    pio_gpio_init(pio, pin);

    // Set the pin direction to output at the PIO
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, true);

	// set the state machine clock rate
	float div = clock_get_hz(clk_sys) / freq ;  // calculates the clock divider
	sm_config_set_clkdiv(&c, div);

    // Load our configuration, and jump to the start of the program
    pio_sm_init(pio, sm, offset, &c);

    // Set the state machine running
    pio_sm_set_enabled(pio, sm, true);
}
%}

/*
**************************
vid_out
**************************
*/

.program    vid_out
/* The vid_out program reads a value from the transmit fifo and then outputs
   that to the 15 output pins for the vga display.  Remember that GPIO5 is not
   used for video; but rather SD_CLK.  For this example, we will just ignore GPIO5
   and send a 0 to it based on the C program.
   irq 5 is set by the hsync
   program and indicates the horizontal blanking time
*/

//public vout:
vout_start:
 	wait 0 irq 0				; wait for end of vertical back porch
	wait 0 irq 5				; wait until hsycn clears IRQ 5, end of horizontal back porch
	pull noblock		  		; grabs color to display from tx fifo
	mov x, osr					; fills x register with value to allow noblock pull to keep info
	out pins,16					; alt outputs video color signals to GPIO 0 through 15,
								//	GPIO5 will get jumk


// configure the vid_out program
% c-sdk {
#include "hardware/clocks.h"

static inline void vid_out_program_init(PIO pio, uint sm, uint offset, uint pin, float freq) {

    // Set the pin group GPIO function (connect PIO to the pad)
    for(uint j=0; j<17; j++) {
		pio_gpio_init(pio, j);
	}

    // Set the pin group's direction to output at the PIO
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 16, true);

    pio_sm_config c = vid_out_program_get_default_config(offset);

    // Map the video outputs to 16 pins starting at 'pin'
	// for the out parameter to this function.
	sm_config_set_out_pins(&c, pin, 16);

	// set the state machine clock rate
	float div = clock_get_hz(clk_sys) / freq ;  // calculates the clock divider
	sm_config_set_clkdiv(&c, div);

	// join both FIFOs to make an 8 word TX FIFO
	sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX);

    // Load our configuration, and jump to the start of the program
    pio_sm_init(pio, sm, offset, &c);

    // Set the state machine running
    pio_sm_set_enabled(pio, sm, true);
}
%}

*************************************************************
ep12_video_1E.c
*************************************************************

/**
 * Episode 12 Example 1E
 * Output horizontal and vertical sync pulses and video 
 * from line_buffer
 * 
 */
#include "pico/stdlib.h"
#include "hardware/pio.h"
#include "hardware/irq.h"
#include "hardware/dma.h"
#include "hardware/gpio.h"
#include "hardware/structs/bus_ctrl.h"
#include <stdio.h>
// Our assembled PIO program:
#include "ep12_video_1E.pio.h"

#define vid_pio pio0
#define PIXELS_PER_LINE 640
#define ACTIVE_LINES_PER_FRAME 487

uint HSYNC_PIN = 16;
uint VSYNC_PIN = 17;
uint VID_PIN = 0;
uint h_line_count;
uint dma_chan;
uint16_t line_buffer[PIXELS_PER_LINE];
 
void gpio_callback(uint gpio, uint32_t events) {
    if (gpio == HSYNC_PIN) { //if horizontal pulse triggered, increment line count
		if (h_line_count >= 45) {
			dma_channel_set_read_addr(dma_chan,line_buffer,true) ;// start DMA
		}
		++h_line_count;
	}
	else	{  // vsync is the interrupt, "0" is the start of vert front porch
		h_line_count = 10; // vsync starts 10 lines after the front porch
	}
}

int main() {
	stdio_init_all();  // set up to print out
	
	bus_ctrl_hw->priority = BUSCTRL_BUS_PRIORITY_DMA_W_BITS | BUSCTRL_BUS_PRIORITY_DMA_R_BITS;
	
	
	// Our assembled programs needs to be loaded into this PIO's instruction
    // memory. This SDK function will find a location (offset) in the
    // instruction memory where there is enough space for our program. We need
    // to remember this location!
    uint hoffset = pio_add_program(vid_pio, &video_hsync_program);
	uint voffset = pio_add_program(vid_pio, &video_vsync_program);
	uint vidoffset = pio_add_program(vid_pio, &vid_out_program);
	
	
	// select the desired state machine clock frequency 
	float SMh_CLK_FREQ = 1562500 ;   //hsync
	float SMv_CLK_FREQ = 25000000;   //vsync
	float SMvid_CLK_FREQ = 125000000; //vid_out

    // Find a free state machine on our chosen PIO (erroring if there are
    // none). Configure it to run our programs, and start it, using the
    // helper functions we included in our .pio file.
    uint smh = pio_claim_unused_sm(vid_pio, true);
	uint smv = pio_claim_unused_sm(vid_pio, true);
	uint smvid = pio_claim_unused_sm(vid_pio, true);
	
	video_hsync_program_init(vid_pio, smh, hoffset, HSYNC_PIN, SMh_CLK_FREQ);
	video_vsync_program_init(vid_pio, smv, voffset, VSYNC_PIN, SMv_CLK_FREQ);
	vid_out_program_init(vid_pio, smvid, vidoffset, VID_PIN, SMvid_CLK_FREQ);

    // All state machines are now running. 
	pio_sm_put (vid_pio, smv,  ACTIVE_LINES_PER_FRAME); // counter value for vsync
	pio_sm_exec(vid_pio, smv, pio_encode_pull(false, false));
	pio_sm_exec(vid_pio, smv, pio_encode_out(pio_x,32));

	//Identify the interupt states
	gpio_set_irq_enabled_with_callback(HSYNC_PIN, GPIO_IRQ_EDGE_FALL, true, &gpio_callback);
	gpio_set_irq_enabled(VSYNC_PIN, GPIO_IRQ_EDGE_FALL, true);
	
	//Set-up the DMA channel to transmit the line_buffer
    dma_chan = dma_claim_unused_channel(true);
    dma_channel_config c = dma_channel_get_default_config(dma_chan);
    channel_config_set_transfer_data_size(&c, DMA_SIZE_16);
    channel_config_set_dreq(&c,  pio_get_dreq(vid_pio, smvid, true)); //This sets up the dreq for sending data to sm
	
	dma_channel_configure(
        dma_chan,
        &c,
        &pio0_hw->txf[smvid], // Write address (smvid transmit FIFO)
        line_buffer,      // read pixel data from line buffer
        PIXELS_PER_LINE,  // Write a line of pixels, then halt and interrupt
        false            //  don't start yet
    );
	
/*
setup for the test pattern:
Red is 0 to 31; 31 is pure red
green is 64 to 2047; 1984 is pure green
blue is 2048 to 65535; 63488 is pure blue
cyan = 65472, 63519 is magenta,65535 is white, 2015 is yellow
*/

	uint color[8] = {31,1984,63488,0,2015,63519,65477,65535};
	uint array_counter;

		for (int i = 0; i < 8; ++i){ 				// write 8 colors across the screen
			for (int j = 0; j < 80; ++j){
				array_counter = (i*80) + j;
				line_buffer[array_counter] = color[i];
			}
		}
//		Clearing the end of line_buffer for testing purposes
		for (int i = 620; i < PIXELS_PER_LINE; ++i){
			line_buffer[i] = 0;
		}
//		Clearing the beginning of line buffer for testing purposes		
		for (int i = 0; i < 2; ++i){
			line_buffer[i] = 0;
		}
	while(true) {		//idle while DMA and PIO works
//		sleep_ms(10000);		//for test purposes
 		tight_loop_contents	;
	}
}

***************************************************************
CMakeLists.txt
***************************************************************

cmake_minimum_required(VERSION 3.19)

# Pull in SDK (must be before project)
include(pico_sdk_import.cmake)


project(ep12_video_1E C CXX ASM)
set(CMAKE_C_STANDARD 11)
set(CMAKE_CXX_STANDARD 17)

set(DAVID_EXAMPLES_PATH ${PROJECT_SOURCE_DIR})

# Initialize the SDK
pico_sdk_init()



add_executable(${PROJECT_NAME}
	ep12_video_1E.c
)

pico_generate_pio_header(${PROJECT_NAME} ${CMAKE_CURRENT_LIST_DIR}/ep12_video_1E.pio)

#target_sources(ep12_video_1E_pio PRIVATE ep12_video_1E.c)


target_link_libraries(${PROJECT_NAME}
        pico_stdlib
        hardware_pio
	hardware_dma
        hardware_irq
	hardware_structs
        )

pico_add_extra_outputs(${PROJECT_NAME})

# Enable usb output, disable uart output
pico_enable_stdio_usb(${PROJECT_NAME} 1)
pico_enable_stdio_uart(${PROJECT_NAME} 0)

# add url via pico_set_program_url
# example_auto_set_url(${PROJECT_NAME})








